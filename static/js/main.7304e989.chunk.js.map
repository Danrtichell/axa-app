{"version":3,"sources":["modules/applicant/ApplicantStyle.ts","modules/applicant/RegisterForm.tsx","dto/ApplicantDto.ts","utils/auth.ts","lib/axios.ts","modules/applicant/ApplicantPage.tsx","api/authApi.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ApplicantPageWrapper","styled","div","layout","labelCol","span","wrapperCol","tailLayout","offset","RegisterForm","props","applicantInfo","onChangeApplicantInfo","onRegister","name","Item","label","rules","required","message","value","onChange","event","target","email","mobile","positionApplied","source","type","htmlType","onClick","ApplicantDto","data","id","property","hasOwnProperty","this","result","init","cookies","Cookies","getApiKey","apiKey","get","path","axiosInstance","axios","create","baseURL","process","headers","Accept","timeout","ApplicantPage","useState","fromJS","setApplicantInfo","console","log","fieldName","post","then","resp","catch","error","App","Boolean","window","location","hostname","match","interceptors","request","use","a","config","url","response","status","Promise","reject","MOUNT_NODE","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7304e989.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst ApplicantPageWrapper = styled.div`\n  margin-top: 10px;\n\n  .upload-resume {\n    text-align: center;\n  }\n`\n\nexport default ApplicantPageWrapper\n","import React from 'react'\nimport { Form, Input, Button } from 'antd'\nimport { IApplicantDto } from '../../dto/ApplicantDto'\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 8 }\n}\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 }\n}\n\ntype Props = {\n  applicantInfo: IApplicantDto\n  onChangeApplicantInfo: (fieldName: string, value: string) => void\n  onRegister: () => void\n}\n\nconst RegisterForm = (props: Props) => {\n  const { applicantInfo, onChangeApplicantInfo, onRegister } = props\n  return (\n    <Form {...layout} name=\"register\">\n      <Form.Item\n        label=\"Name\"\n        name=\"name\"\n        rules={[{ required: true, message: 'Please input your name!' }]}>\n        <Input\n          value={applicantInfo.name}\n          onChange={(event) =>\n            onChangeApplicantInfo('name', event.target.value)\n          }\n        />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your email!' }]}>\n        <Input\n          value={applicantInfo.email}\n          onChange={(event) =>\n            onChangeApplicantInfo('email', event.target.value)\n          }\n        />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Mobile\"\n        name=\"mobile\"\n        rules={[{ required: true, message: 'Please input your mobile!' }]}>\n        <Input\n          value={applicantInfo.mobile}\n          onChange={(event) =>\n            onChangeApplicantInfo('mobile', event.target.value)\n          }\n        />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Position Applied\"\n        name=\"positionApplied\"\n        rules={[\n          { required: true, message: 'Please input your position applied!' }\n        ]}>\n        <Input\n          value={applicantInfo.positionApplied}\n          onChange={(event) =>\n            onChangeApplicantInfo('positionApplied', event.target.value)\n          }\n        />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Agency Name\"\n        name=\"source\"\n        rules={[{ required: true, message: 'Please input your agency name!' }]}>\n        <Input\n          value={applicantInfo.source}\n          onChange={(event) =>\n            onChangeApplicantInfo('source', event.target.value)\n          }\n        />\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"button\" onClick={onRegister}>\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  )\n}\n\nexport default RegisterForm\n","export default class ApplicantDto implements IApplicantDto {\n  name!: string | undefined\n  email!: string | undefined\n  mobile!: string | undefined\n  positionApplied!: string | undefined\n  source!: string | undefined\n  id!: number\n\n  constructor(data?: IApplicantDto) {\n    if (data) {\n      for (const property in data) {\n        if (data.hasOwnProperty(property))\n          (<any>this)[property] = (<any>data)[property]\n      }\n    }\n  }\n\n  init(data?: any) {\n    if (data) {\n      this.name = data['name']\n      this.email = data['email']\n      this.mobile = data['mobile']\n      this.positionApplied = data['positionApplied']\n      this.source = data['source']\n      this.id = data['id']\n    }\n  }\n\n  static fromJS(data: any): IApplicantDto {\n    data = typeof data === 'object' ? data : {}\n    let result = new ApplicantDto()\n    result.init(data)\n    return result\n  }\n\n  toJSON(data?: any) {\n    data = typeof data === 'object' ? data : {}\n    data['name'] = this.name\n    data['email'] = this.email\n    data['mobile'] = this.mobile\n    data['positionApplied'] = this.positionApplied\n    data['source'] = this.source\n    data['id'] = this.id\n    return data\n  }\n}\n\nexport interface IApplicantDto {\n  name: string | undefined\n  email: string | undefined\n  mobile: string | undefined\n  positionApplied: string | undefined\n  source: string | undefined\n  id: number\n}\n","import Cookies, { CookieGetOptions } from 'universal-cookie'\n\nconst cookies = new Cookies()\n\nexport const getApiKey = (): string | undefined => {\n  const apiKey = cookies.get('apiKey', { path: '/' } as CookieGetOptions)\n  if (apiKey) {\n    return apiKey\n  }\n\n  return undefined\n}\n\nexport const setApiKey = (apiKey: string): void => {\n  cookies.set('x-axa-api-key', apiKey, { httpOnly: false, path: '/' })\n}\n\nexport const removeApiKey = (): void => {\n  cookies.remove('x-axa-api-key', { path: '/' })\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios'\nimport { getApiKey } from '../utils/auth'\n\nconst axiosInstance: AxiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  headers: {\n    Accept: 'application/json'\n  },\n  timeout: 10000\n})\n\nexport const configureAuthorization = () => {\n  axiosInstance.interceptors.request.use(async (config: AxiosRequestConfig) => {\n    const apiKey = getApiKey()\n\n    const { url = '' } = config\n\n    if (!url.match(/\\/register/)) {\n      // eslint-disable-next-line no-param-reassign\n      config.headers['x-axa-api-key'] = apiKey\n    }\n\n    return config\n  })\n\n  axiosInstance.interceptors.response.use(\n    (response: AxiosResponse) => response,\n    async (error) => {\n      const { config, response } = error\n\n      if (\n        response &&\n        response.status === 401 &&\n        !config.url.match(/\\/register/)\n      ) {\n        try {\n          // const token = await getToken();\n          // const { data } = await refresh(token);\n          // await setToken(data);\n          // return Promise.resolve(config);\n          return Promise.reject(error)\n        } catch (e) {\n          return Promise.reject(error)\n        }\n      }\n\n      return Promise.reject(error)\n    }\n  )\n}\n\nexport default axiosInstance\n","import React, { useState } from 'react'\nimport ApplicantPageWrapper from './ApplicantStyle'\nimport RegisterForm from './RegisterForm'\nimport ResumeForm from './ResumeForm'\nimport ScheduleForm from './ScheduleForm'\nimport ApplicantDto, { IApplicantDto } from '../../dto/ApplicantDto'\nimport { register } from '../../api/authApi'\n\nconst ApplicantPage = () => {\n  const [applicantInfo, setApplicantInfo] = useState(\n    ApplicantDto.fromJS({\n      name: 'Juan Dela Cruz',\n      email: 'junjundc@email.com',\n      mobile: '09171231234',\n      positionApplied: 'Fullstack Developer',\n      source: 'Test'\n    })\n  )\n\n  console.log('====================================')\n  console.log(applicantInfo)\n  console.log('====================================')\n\n  const onChangeApplicantInfo = (fieldName: string, value: string) => {\n    setApplicantInfo({ ...applicantInfo, [fieldName]: value })\n  }\n\n  const onRegister = () => {\n    console.log('====================================')\n    console.log(applicantInfo)\n    console.log('====================================')\n\n    register(applicantInfo)\n      .then((resp) => console.log(resp))\n      .catch((error) => console.log(error))\n  }\n\n  return (\n    <ApplicantPageWrapper>\n      <RegisterForm\n        applicantInfo={applicantInfo}\n        onChangeApplicantInfo={onChangeApplicantInfo}\n        onRegister={onRegister}\n      />\n    </ApplicantPageWrapper>\n  )\n}\n\nexport default ApplicantPage\n","import axios from '../lib/axios'\nimport { IApplicantDto } from '../dto/ApplicantDto'\n\nexport const register = (data: IApplicantDto) => axios.post('/register', data)\n","import React from 'react'\nimport ApplicantPage from './modules/applicant/ApplicantPage'\nimport logo from './logo.svg'\nimport './App.css'\n\nfunction App(): JSX.Element {\n  return <ApplicantPage />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'antd/dist/antd.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nimport { configureAuthorization } from './lib/axios'\n\nconfigureAuthorization()\n\nconst MOUNT_NODE = document.getElementById('root')\n\nconst render = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    MOUNT_NODE\n  )\n}\n\nrender()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}